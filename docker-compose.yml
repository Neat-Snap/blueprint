services:
  db:
    image: postgres:16-alpine
    container_name: statgrad-postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${DB_NAME?required}
      POSTGRES_USER: ${DB_USER?required}
      POSTGRES_PASSWORD: ${DB_PASS?required}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: statgrad-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: statgrad-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./.env
    environment:
      # Server
      BACKEND_ADDR: ${BACKEND_ADDR?required}
      BACKEND_PUBLIC_URL: ${BACKEND_PUBLIC_URL?required}
      APP_ENV: ${APP_ENV?required}
      APP_READ_TIMEOUT_S: ${APP_READ_TIMEOUT_S?required}
      APP_WRITE_TIMEOUT_S: ${APP_WRITE_TIMEOUT_S?required}
      APP_IDLE_TIMEOUT_S: ${APP_IDLE_TIMEOUT_S?required}

      # Database
      DB_NAME: ${DB_NAME?required}
      DB_USER: ${DB_USER?required}
      DB_PASS: ${DB_PASS?required}
      DB_HOST: db
      DB_PORT: ${DB_PORT?required}

      # Redis
      REDIS_HOST: ${REDIS_HOST?required}
      REDIS_PORT: ${REDIS_PORT?required}
      REDIS_PASS: ${REDIS_PASS?required}
      REDIS_DB: ${REDIS_DB?required}

      # App metadata
      APP_NAME: ${APP_NAME?required}
      APP_URL: ${APP_URL?required}

      # Secrets and auth configuration
      SESSION_SECRET: ${SESSION_SECRET?required}
      AUTH_TOKEN_SECRET: ${AUTH_TOKEN_SECRET?required}
      RESEND_API_KEY: ${RESEND_API_KEY?required}

      WORKOS_API_KEY: ${WORKOS_API_KEY?required}
      WORKOS_CLIENT_ID: ${WORKOS_CLIENT_ID?required}
      WORKOS_DEFAULT_CONNECTION: ${WORKOS_DEFAULT_CONNECTION:-}
      WORKOS_DEFAULT_ORGANIZATION: ${WORKOS_DEFAULT_ORGANIZATION:-}
      WORKOS_CALLBACK_URL: ${WORKOS_CALLBACK_URL?required}

    ports:
      - "8080:8080"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BACKEND_URL: "http://backend:8080"
        NEXT_PUBLIC_API_BASE_URL: "/api"
    container_name: statgrad-frontend
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: "/api"
    depends_on:
      backend:
        condition: service_started
    ports:
      - "3000:3000"

volumes:
  db_data:
